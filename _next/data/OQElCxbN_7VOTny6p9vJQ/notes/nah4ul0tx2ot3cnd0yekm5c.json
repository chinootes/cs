{"pageProps":{"note":{"id":"nah4ul0tx2ot3cnd0yekm5c","title":"Abstract Class","desc":"","updated":1708265520458,"created":1708252825421,"custom":{},"fname":"arch.design.oo.use cases for.abstract class","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"c577dd9efd4a45497e515f4e72952ad9","links":[{"type":"wiki","from":{"fname":"arch.design.oo.use cases for.abstract class","id":"nah4ul0tx2ot3cnd0yekm5c","vaultName":"cs"},"value":"paradigm.oo.components.modifiers.abstract.class","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":52,"offset":53},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oo.components.modifiers.abstract.class"}},{"type":"wiki","from":{"fname":"arch.design.oo.use cases for.abstract class","id":"nah4ul0tx2ot3cnd0yekm5c","vaultName":"cs"},"value":"arch.design.oo.use cases for.abstract class.providing flexible behavior for related classes","position":{"start":{"line":5,"column":3,"offset":97},"end":{"line":5,"column":98,"offset":192},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch.design.oo.use cases for.abstract class.providing flexible behavior for related classes"}},{"type":"wiki","from":{"fname":"arch.design.oo.use cases for.abstract class","id":"nah4ul0tx2ot3cnd0yekm5c","vaultName":"cs"},"value":"arch.design.oo.use cases for.abstract class.helper","position":{"start":{"line":6,"column":3,"offset":264},"end":{"line":6,"column":57,"offset":318},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch.design.oo.use cases for.abstract class.helper"}},{"type":"wiki","from":{"fname":"arch.design.oo.use cases for.abstract class","id":"nah4ul0tx2ot3cnd0yekm5c","vaultName":"cs"},"value":"arch.design.oo.principles.composition over inheritance","position":{"start":{"line":8,"column":135,"offset":516},"end":{"line":8,"column":193,"offset":574},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch.design.oo.principles.composition over inheritance"}},{"type":"wiki","from":{"fname":"arch.design.oo.use cases for.abstract class","id":"nah4ul0tx2ot3cnd0yekm5c","vaultName":"cs"},"value":"philosophy.a principle in principle","position":{"start":{"line":10,"column":40,"offset":616},"end":{"line":10,"column":79,"offset":655},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"philosophy.a principle in principle"}},{"type":"wiki","from":{"fname":"arch.design.oo.use cases for.abstract class","id":"nah4ul0tx2ot3cnd0yekm5c","vaultName":"cs"},"value":"arch.design.oo.use cases for.abstract class.stepping stone","position":{"start":{"line":17,"column":51,"offset":1016},"end":{"line":17,"column":113,"offset":1078},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch.design.oo.use cases for.abstract class.stepping stone"}}],"anchors":{"references":{"type":"header","text":"References","value":"references","line":25,"column":0,"depth":2}},"children":["kgw6j4x72k95k8mt9pzdjoq","4it54b4d0ycxe3j8tsw70xh","kkzt3iloch20y1g3p3e7drc"],"parent":"r85yks4p2zs3atm04k07f86","data":{}},"body":"<h1 id=\"abstract-class\">Abstract Class<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#abstract-class\"></a></h1>\n<p><a href=\"/cs/notes/nh73n4i8cy6gvfnguasaich\">Abstract Class</a>es are mostly used in one of two ways - </p>\n<ul>\n<li><a href=\"/cs/notes/4it54b4d0ycxe3j8tsw70xh\">Abstract Class for Providing Flexible Behavior for Related Classes</a>: If classes you extend have many common methods and fields, we tend.</li>\n<li><a href=\"/cs/notes/kgw6j4x72k95k8mt9pzdjoq\">Abstract Class as a Helper Class</a>: You want to share code among several closely related classes</li>\n</ul>\n<p>Both these ways are better off substituted and hence an <strong>abstract class should almost never be used</strong> since you should try to prefer <a href=\"/cs/notes/k4nl867fpm4pfydcj852798\">Composition over Inheritance</a>.</p>\n<p>However, this is still a principle and <a href=\"/cs/notes/oz6nnmlcua382jj0uwaaa6m\">a principle is just in principle</a>.</p>\n<p>Some other scenarios where Abstract class may be used:</p>\n<ul>\n<li>The classes you extend require methods with <strong>access modifiers</strong> other than public.</li>\n<li>You want to declare <strong>non-static or non-final fields</strong>. This allows you to define methods that can access and modify the state of the object to which they belong.</li>\n</ul>\n<p>You can still consider the above scenarios or use <a href=\"/cs/notes/kkzt3iloch20y1g3p3e7drc\">Abstract Class as Stepping Stone</a>.</p>\n<h2 id=\"references\">References<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#references\"></a></h2>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/20193091/recommendations-for-abstract-classes-vs-interfaces#:~:text=If%20you%20are%20designing%20small,component%2C%20use%20an%20abstract%20class.\">Stack Overflow</a></p>\n<blockquote>\n<p>If we are designing small, concise bits of functionality, use interfaces. If we are designing large functional units, use an abstract class.</p>\n</blockquote>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/a/2947823/14318926\">Nigel Thorne's answer to How to Unit Test Abstract Classes?</a></p>\n</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/cs/notes/kkzt3iloch20y1g3p3e7drc\">Abstract Class as Stepping Stone</a></li>\n<li><a href=\"/cs/notes/kgw6j4x72k95k8mt9pzdjoq\">Abstract Class as a Helper Class</a></li>\n<li><a href=\"/cs/notes/4it54b4d0ycxe3j8tsw70xh\">Abstract Class for Providing Flexible Behavior for Related Classes</a></li>\n</ol>","noteIndex":{"id":"7ncn3al6mmutkhgoesulce9","title":"Computer Science","desc":"","updated":1715103618849,"created":1713296516553,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"36faf26c6be438d4aed355d72b55a110","links":[{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"arch","position":{"start":{"line":6,"column":3,"offset":105},"end":{"line":6,"column":11,"offset":113},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch"}},{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"paradigm","position":{"start":{"line":11,"column":3,"offset":159},"end":{"line":11,"column":15,"offset":171},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm"}}],"anchors":{"references":{"type":"header","text":"References","value":"references","line":23,"column":0,"depth":2}},"children":["0xgibr34qhbv1edksyoxakk","e5kuv5gcz6pdxrsakpf7eia","t246wcci6dy9lnof7l1os4l","71sipcgr0pdqyxnmntvx28w","5omh1zinw87le0eyms8g5mk","91er1wb2f5wmbdb5axx5r3r","9z7xt251y1nm9dy2exatukr","u712e7r8bk97hpg9h9j3m4f","xpf86eilma499o4ul566fk8","a1g6tjx0p6bp25v75262gp9","3pr5jo5c742vop6gnoe7c3k","stxoouqpk2rivotuvhjx4yz","g8tiwuotfnbfrbctwyfg8rc","jk63inaclv0ps5i7mktzmm2","5m1yclhdqeshe5szt0masfk","abgag3m7m74vmofvzyyt2fm"],"parent":null,"data":{},"body":"\n\nThese notes are arranged into the below topics:\n\n- AI (Sorry this is on the top, list is alphabetic)\n- [[arch]]\n- Data\n- Execution\n- Languages\n- Semantics\n- [[paradigm]]\n- Philosophy\n- Dev\n- Tools\n- Type Theory\n\n## References\n\n- Hierarchy inpiration - [Map of Computer Science](https://www.flickr.com/photos/95869671@N08/36231833334/in/photostream/lightbox/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"dependencies/github.com/chinootes/math","remote":{"type":"git","url":"git@github.com:chinootes/math.git"},"selfContained":true,"name":"math"},{"fsPath":".","selfContained":true,"name":"cs"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://chinootes.github.io","assetsPrefix":"/cs","duplicateNoteBehavior":{"action":"useVault","payload":["math","cs"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}