{"pageProps":{"note":{"id":"k16ee23xfsfsittiqteajoa","title":"Iterators","desc":"","updated":1727110108622,"created":1726650383152,"custom":{},"fname":"lang.java.lib.collection.iterators","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"0fa40e8dda3232038b46adabd8c053fd","links":[{"type":"wiki","from":{"fname":"lang.java.lib.collection.iterators","id":"k16ee23xfsfsittiqteajoa","vaultName":"cs"},"value":"lang.java.lib.collection","alias":"legacy collections","position":{"start":{"line":8,"column":38,"offset":327},"end":{"line":8,"column":104,"offset":393},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.collection","anchorHeader":"legacy-collections"}},{"type":"wiki","from":{"fname":"lang.java.lib.collection.iterators","id":"k16ee23xfsfsittiqteajoa","vaultName":"cs"},"value":"lang.java.paradigms.oo.inner class","position":{"start":{"line":43,"column":34,"offset":1797},"end":{"line":43,"column":72,"offset":1835},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.paradigms.oo.inner class"}},{"from":{"fname":"lang.java.lib.collection","id":"dkdtvct3q6f8lggmoqrqf43","vaultName":"cs"},"type":"backlink","position":{"start":{"line":362,"column":58,"offset":16996},"end":{"line":362,"column":96,"offset":17034},"indent":[]},"value":"lang.java.lib.collection.iterators"}],"anchors":{"use-cases-and-trade-offs":{"type":"header","text":"Use cases and Trade Offs","value":"use-cases-and-trade-offs","line":12,"column":0,"depth":2},"initialization":{"type":"header","text":"Initialization","value":"initialization","line":20,"column":0,"depth":2},"methods":{"type":"header","text":"Methods","value":"methods","line":53,"column":0,"depth":2},"enumeration":{"type":"header","text":"Enumeration","value":"enumeration","line":55,"column":0,"depth":3},"iterator":{"type":"header","text":"Iterator","value":"iterator","line":60,"column":0,"depth":3},"list-iterator":{"type":"header","text":"List Iterator","value":"list-iterator","line":66,"column":0,"depth":3}},"children":[],"parent":"dkdtvct3q6f8lggmoqrqf43","data":{}},"body":"<h1 id=\"iterators\">Iterators<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iterators\"></a></h1>\n<p>Collection framework provides iterator interfaces like <code>Enumeration</code>, <code>Iterator</code> and <code>ListIterator</code> to iterate over the elements within a collection. </p>\n<p><code>Enumeration</code> is a legacy interface. While <code>ListIterator</code> is a child of <code>Iterator</code> specifically for lists.</p>\n<h2 id=\"use-cases-and-trade-offs\">Use cases and Trade Offs<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#use-cases-and-trade-offs\"></a></h2>\n<ul>\n<li><code>Enumeration</code> can only be used for <a href=\"/cs/notes/dkdtvct3q6f8lggmoqrqf43#legacy-collections\">legacy collections</a> like <code>Vector</code> and <code>Hashtable</code>. Also, it supports only <strong>read operations</strong>.</li>\n<li><code>Iterator</code> is the most commonly used since it can be used for any Collection. It can be used to remove but not for replacing or adding new object.</li>\n<li>Both <code>Enumeration</code> and <code>Iterator</code> are only forward direction cursor</li>\n<li><code>ListIterator</code> is the most powerful cursor which is bidirectional and has methods to remove, replace and add new objects. But it can only be used for <code>List</code> collections.</li>\n</ul>\n<h2 id=\"initialization\">Initialization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#initialization\"></a></h2>\n<pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token class-name\">Enumeration</span> e <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//v is a vector</span>\n <span class=\"token class-name\">Iterator</span> itr <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//c is any collection object</span>\n <span class=\"token class-name\">ListIterator</span> litr <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">listIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//l is any List object</span>\n</code></pre>\n<p>But all the iterators mentioned above are interfaces.</p>\n<p>How can we create objects for interfaces then? ⇒ <strong>We don't</strong>.</p>\n<p>These methods being used to initialize the iterators have a class within them which implements the corresponding interface. The object of this class is then returned. </p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i is an object of a iterator</span>\n</code></pre>\n<p>Output:</p>\n<pre class=\"language-java\"><code class=\"language-java\">vector$<span class=\"token number\">1</span>              <span class=\"token comment\">// if c is an Enumeration Object</span>\nvector$<span class=\"token class-name\">Itr</span>            <span class=\"token comment\">// if c is an Iterator Object</span>\nvector$<span class=\"token class-name\">ListItr</span>        <span class=\"token comment\">// if c is a List Iterator Object</span>\n</code></pre>\n<p><code>vector$</code> means inner class of vector ( or whichever Collection class we're getting the object for)</p>\n<p>1 means it is an anonymous inner class</p>\n<p><code>Itr</code> and <code>ListItr</code> are names of <a href=\"/cs/notes/rbwa494d95g4cvpx7sxvxcu\">Inner Class</a>es implementing Iterator and ListIterator respectively.</p>\n<h2 id=\"methods\">Methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#methods\"></a></h2>\n<h3 id=\"enumeration\">Enumeration<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#enumeration\"></a></h3>\n<ul>\n<li><code>public boolean hasMoreElements()</code></li>\n<li><code>public Object nextElement()</code></li>\n</ul>\n<h3 id=\"iterator\">Iterator<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iterator\"></a></h3>\n<ul>\n<li><code>public boolean hasNext()</code></li>\n<li><code>public Object next()</code></li>\n<li><code>public void remove()</code></li>\n</ul>\n<h3 id=\"list-iterator\">List Iterator<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#list-iterator\"></a></h3>\n<p>Forward</p>\n<ul>\n<li><code>public boolean hasNext()</code></li>\n<li><code>public Object next()</code></li>\n<li><code>public int nextIndex()</code></li>\n</ul>\n<p>Extra capabilities</p>\n<ul>\n<li><code>public void remove()</code></li>\n<li><code>public void set(Object new)</code> → replace</li>\n<li><code>public void add(Object new)</code></li>\n</ul>\n<p>Backward</p>\n<ul>\n<li><code>public boolean hasPrevious()</code></li>\n<li><code>public Object previous()</code></li>\n<li><code>public int previousIndex()</code></li>\n</ul>\n<p>The <code>set()</code> method of <code>ListIterator</code> interface is used to replace the last element which is returned by the <code>next()</code> or <code>previous()</code> along with the given element. The call can be added only if neither <code>remove()</code> nor <code>add(E)</code> method have been called.</p>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/cs/notes/dkdtvct3q6f8lggmoqrqf43\">Collection Framework (cs)</a></li>\n</ul>","noteIndex":{"id":"7ncn3al6mmutkhgoesulce9","title":"Computer Science","desc":"","updated":1715103618849,"created":1713296516553,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"36faf26c6be438d4aed355d72b55a110","links":[{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"arch","position":{"start":{"line":6,"column":3,"offset":105},"end":{"line":6,"column":11,"offset":113},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch"}},{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"paradigm","position":{"start":{"line":11,"column":3,"offset":159},"end":{"line":11,"column":15,"offset":171},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm"}}],"anchors":{"references":{"type":"header","text":"References","value":"references","line":23,"column":0,"depth":2}},"children":["0xgibr34qhbv1edksyoxakk","e5kuv5gcz6pdxrsakpf7eia","t246wcci6dy9lnof7l1os4l","71sipcgr0pdqyxnmntvx28w","5omh1zinw87le0eyms8g5mk","91er1wb2f5wmbdb5axx5r3r","9z7xt251y1nm9dy2exatukr","u712e7r8bk97hpg9h9j3m4f","xpf86eilma499o4ul566fk8","a1g6tjx0p6bp25v75262gp9","3pr5jo5c742vop6gnoe7c3k","stxoouqpk2rivotuvhjx4yz","g8tiwuotfnbfrbctwyfg8rc","jk63inaclv0ps5i7mktzmm2","5m1yclhdqeshe5szt0masfk","abgag3m7m74vmofvzyyt2fm"],"parent":null,"data":{},"body":"\n\nThese notes are arranged into the below topics:\n\n- AI (Sorry this is on the top, list is alphabetic)\n- [[arch]]\n- Data\n- Execution\n- Languages\n- Semantics\n- [[paradigm]]\n- Philosophy\n- Dev\n- Tools\n- Type Theory\n\n## References\n\n- Hierarchy inpiration - [Map of Computer Science](https://www.flickr.com/photos/95869671@N08/36231833334/in/photostream/lightbox/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"dependencies/github.com/chinootes/math","remote":{"type":"git","url":"git@github.com:chinootes/math.git"},"selfContained":true,"name":"math"},{"fsPath":".","selfContained":true,"name":"cs"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://chinootes.github.io","assetsPrefix":"/cs","duplicateNoteBehavior":{"action":"useVault","payload":["math","cs"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}