{"pageProps":{"note":{"id":"gnqzf0k4jeg5f1a0o88l7iw","title":"Syntax","desc":"Java Syntax","updated":1714721082175,"created":1709449585041,"custom":{},"fname":"lang.java.syntax","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"04d513072c539fad2ddf6663f4e74a2d","links":[{"type":"wiki","from":{"fname":"lang.java.syntax","id":"gnqzf0k4jeg5f1a0o88l7iw","vaultName":"cs"},"value":"lang.java.paradigms.oo.instantiation.iib","position":{"start":{"line":64,"column":32,"offset":1330},"end":{"line":64,"column":76,"offset":1374},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.paradigms.oo.instantiation.iib"}},{"type":"wiki","from":{"fname":"lang.java.syntax","id":"gnqzf0k4jeg5f1a0o88l7iw","vaultName":"cs"},"value":"paradigm.oo.components.modifiers.static","position":{"start":{"line":72,"column":33,"offset":1590},"end":{"line":72,"column":76,"offset":1633},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oo.components.modifiers.static"}}],"anchors":{"hello-world":{"type":"header","text":"Hello World","value":"hello-world","line":9,"column":0,"depth":2},"rules":{"type":"header","text":"Rules","value":"rules","line":19,"column":0,"depth":2},"naming-conventions":{"type":"header","text":"Naming Conventions","value":"naming-conventions","line":29,"column":0,"depth":2},"comments":{"type":"header","text":"Comments","value":"comments","line":36,"column":0,"depth":2},"variables":{"type":"header","text":"Variables","value":"variables","line":45,"column":0,"depth":2},"declaration":{"type":"header","text":"Declaration","value":"declaration","line":47,"column":0,"depth":3},"initialization":{"type":"header","text":"Initialization","value":"initialization","line":49,"column":0,"depth":3},"both-at-once":{"type":"header","text":"Both at once","value":"both-at-once","line":51,"column":0,"depth":3},"constants":{"type":"header","text":"Constants","value":"constants","line":53,"column":0,"depth":2},"blank-final-variable":{"type":"header","text":"Blank final variable","value":"blank-final-variable","line":57,"column":0,"depth":3},"ways-to-initialise":{"type":"header","text":"Ways to initialise","value":"ways-to-initialise","line":68,"column":0,"depth":4},"blank-static-final-membervariable":{"type":"header","text":"Blank static final member/variable","value":"blank-static-final-membervariable","line":76,"column":0,"depth":4},"initialisation":{"type":"header","text":"Initialisation","value":"initialisation","line":80,"column":0,"depth":5},"data-types":{"type":"header","text":"Data types","value":"data-types","line":85,"column":0,"depth":2},"primitives":{"type":"header","text":"Primitives","value":"primitives","line":87,"column":0,"depth":3},"suffixing-for-non-default-primitive-data-types":{"type":"header","text":"Suffixing for Non-default Primitive Data Types","value":"suffixing-for-non-default-primitive-data-types","line":106,"column":0,"depth":4},"prefixing-for-different-bases":{"type":"header","text":"Prefixing for Different Bases","value":"prefixing-for-different-bases","line":130,"column":0,"depth":4},"compound":{"type":"header","text":"Compound","value":"compound","line":137,"column":0,"depth":3},"array":{"type":"header","text":"Array","value":"array","line":139,"column":0,"depth":4},"declaration-1":{"type":"header","text":"Declaration","value":"declaration-1","line":141,"column":0,"depth":5},"initialization-1":{"type":"header","text":"Initialization","value":"initialization-1","line":152,"column":0,"depth":5},"strings":{"type":"header","text":"Strings","value":"strings","line":158,"column":0,"depth":4},"declaration-2":{"type":"header","text":"Declaration","value":"declaration-2","line":160,"column":0,"depth":5},"initialization-2":{"type":"header","text":"Initialization","value":"initialization-2","line":166,"column":0,"depth":5},"both-at-once-1":{"type":"header","text":"Both at once","value":"both-at-once-1","line":179,"column":0,"depth":5},"length":{"type":"header","text":"Length","value":"length","line":191,"column":0,"depth":5},"loopingcharacter-at-index":{"type":"header","text":"Looping/character at index","value":"loopingcharacter-at-index","line":197,"column":0,"depth":5},"structures":{"type":"header","text":"Structures","value":"structures","line":202,"column":0,"depth":4},"interfaces":{"type":"header","text":"Interfaces","value":"interfaces","line":203,"column":0,"depth":4},"classes":{"type":"header","text":"Classes","value":"classes","line":205,"column":0,"depth":4},"creating-objects":{"type":"header","text":"Creating objects","value":"creating-objects","line":207,"column":0,"depth":5},"using-objects":{"type":"header","text":"Using objects","value":"using-objects","line":221,"column":0,"depth":5},"operators":{"type":"header","text":"Operators","value":"operators","line":250,"column":0,"depth":2},"flow":{"type":"header","text":"Flow","value":"flow","line":252,"column":0,"depth":2},"conditionals":{"type":"header","text":"Conditionals","value":"conditionals","line":254,"column":0,"depth":3},"loops":{"type":"header","text":"Loops","value":"loops","line":256,"column":0,"depth":3},"functionsmethods":{"type":"header","text":"Functions/Methods","value":"functionsmethods","line":258,"column":0,"depth":2},"public-static-void-mainstring-args":{"type":"header","text":"public static void main(String[] args)","value":"public-static-void-mainstring-args","line":260,"column":0,"depth":3}},"children":[],"parent":"mrk0ypui29nso2bc2r99pok","data":{},"schema":{"schemaId":"syntax","moduleId":"lang"}},"body":"<h1 id=\"syntax\">Syntax<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#syntax\"></a></h1>\n<h2 id=\"hello-world\">Hello World<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hello-world\"></a></h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"rules\">Rules<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rules\"></a></h2>\n<ol>\n<li>Outer Class - Always public or default</li>\n<li>There can be only one public class in a java file.</li>\n<li>File name = (public,if any) class name</li>\n<li>Every function has to be a member function of a class. Even main function.</li>\n<li>Main functionâ€™s prototype is fixed <code>public static void main(String[] args)</code></li>\n<li>No semicolon after class definition.</li>\n<li>Semicolon after every statement.</li>\n</ol>\n<h2 id=\"naming-conventions\">Naming Conventions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#naming-conventions\"></a></h2>\n<ul>\n<li>PascalCase for class names.</li>\n<li>camelCase for methods, objects and variable names.</li>\n<li>UPPERCASE for constants</li>\n</ul>\n<h2 id=\"comments\">Comments<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#comments\"></a></h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/*Multiple Line*/</span>\n<span class=\"token comment\">//Single Line</span>\n<span class=\"token doc-comment comment\">/** Documentation Style*/</span>\n</code></pre>\n<h2 id=\"variables\">Variables<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#variables\"></a></h2>\n<h3 id=\"declaration\">Declaration<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#declaration\"></a></h3>\n<h3 id=\"initialization\">Initialization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#initialization\"></a></h3>\n<h3 id=\"both-at-once\">Both at once<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#both-at-once\"></a></h3>\n<h2 id=\"constants\">Constants<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#constants\"></a></h2>\n<p>Prefixing <code>final</code> keyword to the  declaration+ initialization.</p>\n<h3 id=\"blank-final-variable\">Blank final variable<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#blank-final-variable\"></a></h3>\n<p>Final variable not initialised during declaration</p>\n<p>All final variables must be initialised, or else => Compile time error</p>\n<p>=> These have to be initialized later, in constructor or somewhere.</p>\n<blockquote>\n<p>It might not sound correct to call it variable since by definition, <code>final</code> means constant, so by behaviour, it doesn't vary.\nBut these variables can vary once.</p>\n</blockquote>\n<h4 id=\"ways-to-initialise\">Ways to initialise<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ways-to-initialise\"></a></h4>\n<ul>\n<li>Can be initialised within an <a href=\"/cs/notes/ct60bbrwtvpngnot1hgmk4h\">Instance Initializer Block</a></li>\n<li>Can be initialised within a constructor</li>\n<li>If there are multiple constructors</li>\n<li>Initialise in all of them, or else => Compile time error</li>\n</ul>\n<h4 id=\"blank-static-final-membervariable\">Blank static final member/<em>variable</em><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#blank-static-final-membervariable\"></a></h4>\n<p>Blank final <em>variable</em> which is <a href=\"/cs/notes/vklzkbrsrz6jzd5swlmq8yn\">Static</a>.</p>\n<h5 id=\"initialisation\">Initialisation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#initialisation\"></a></h5>\n<p>Only within static block.</p>\n<h2 id=\"data-types\">Data types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-types\"></a></h2>\n<h3 id=\"primitives\">Primitives<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#primitives\"></a></h3>\n<ul>\n<li><code>byte</code>\n<ul>\n<li>8 bits and signed</li>\n</ul>\n</li>\n<li><code>short</code>\n<ul>\n<li>16 bits and signed</li>\n</ul>\n</li>\n<li><code>char</code>\n<ul>\n<li>16 bits and unsigned, so that it may represent Unicode characters</li>\n</ul>\n</li>\n<li><code>int</code>\n<ul>\n<li>32 bits and signed</li>\n</ul>\n</li>\n<li><code>long</code>\n<ul>\n<li>64 bits and signed</li>\n</ul>\n</li>\n<li><code>float</code>\n<ul>\n<li>32 bits and signed</li>\n</ul>\n</li>\n<li><code>double</code>\n<ul>\n<li>64 bits and signed</li>\n</ul>\n</li>\n<li><code>boolean</code>\n<ul>\n<li>it's not numeric, may only haveÂ trueÂ orÂ falseÂ values</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"suffixing-for-non-default-primitive-data-types\">Suffixing for Non-default Primitive Data Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#suffixing-for-non-default-primitive-data-types\"></a></h4>\n<ul>\n<li>\n<p><code>int</code> and <code>long</code></p>\n<p>  Default type for integer literals is <code>int</code>. That is, unless specified otherwise, 35 is an <code>int</code>. So if we assign an integer directly to a <code>long</code> variable, it will result in compilation error.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//Compilation error</span>\n<span class=\"token keyword\">long</span> x <span class=\"token operator\">=</span> <span class=\"token number\">232342</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>  Thus, we have to specify explicitly that the value 232342 is a <code>long</code>.</p>\n<p>  This can be done by suffixing <code>l</code> or <code>L</code> to the value. For example. <code>232342L</code>.</p>\n</li>\n<li>\n<p><code>float</code> and <code>double</code></p>\n<p>  Similarly, double is the default value for floating point literals. Unless explicitly stated, 9.5 is a <code>double</code> not a <code>float</code>.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3.7</span> <span class=\"token comment\">// 3.7 is a double, â€˜aâ€™ is float => Error</span>\n<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3.7f</span> <span class=\"token comment\">// a is a float</span>\n</code></pre>\n</li>\n</ul>\n<h4 id=\"prefixing-for-different-bases\">Prefixing for Different Bases<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#prefixing-for-different-bases\"></a></h4>\n<ul>\n<li><strong>Decimal</strong>: <code>127</code></li>\n<li><strong>Hexadecimal</strong>: <code>0x7f</code> (Prefix - <code>0x</code>)</li>\n<li><strong>Octal</strong>: <code>0177</code> (Prefix - <code>0</code>)</li>\n<li><strong>Binary</strong>: <code>0b10011001</code> (Prefix - <code>0b</code>)</li>\n</ul>\n<h3 id=\"compound\">Compound<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#compound\"></a></h3>\n<h4 id=\"array\">Array<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#array\"></a></h4>\n<h5 id=\"declaration-1\">Declaration<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#declaration-1\"></a></h5>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Array can be defined in java in the above two ways. However, unlike C++ defining an array actually means that we are defining a pointer, which will point to an array.</p>\n<h5 id=\"initialization-1\">Initialization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#initialization-1\"></a></h5>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"strings\">Strings<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#strings\"></a></h4>\n<h5 id=\"declaration-2\">Declaration<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#declaration-2\"></a></h5>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n</code></pre>\n<h5 id=\"initialization-2\">Initialization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#initialization-2\"></a></h5>\n<pre class=\"language-java\"><code class=\"language-java\">s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\">s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5 id=\"both-at-once-1\">Both at once<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#both-at-once-1\"></a></h5>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5 id=\"length\">Length<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#length\"></a></h5>\n<pre class=\"language-java\"><code class=\"language-java\">s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5 id=\"loopingcharacter-at-index\">Looping/character at index<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loopingcharacter-at-index\"></a></h5>\n<pre class=\"language-java\"><code class=\"language-java\">s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"structures\">Structures<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#structures\"></a></h4>\n<h4 id=\"interfaces\">Interfaces<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#interfaces\"></a></h4>\n<h4 id=\"classes\">Classes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#classes\"></a></h4>\n<h5 id=\"creating-objects\">Creating objects<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#creating-objects\"></a></h5>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Box</span> smallBox<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Unlike C++, the above statement wonâ€™t create an object. It will just create a reference variable. The reference variable has to be given an object.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Box</span> smallBox<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Now <code>smallBox</code> contains address of an object of Box class. That is, it points to the object. However, the object itself has no name.</p>\n<h5 id=\"using-objects\">Using objects<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#using-objects\"></a></h5>\n<p>Through its reference.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> \n <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n   <span class=\"token class-name\">Box</span> smallBox<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   smallBox<span class=\"token punctuation\">.</span><span class=\"token function\">setDimension</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   smallBox<span class=\"token punctuation\">.</span>showDimension<span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">/*From the perspective of C++, \n  it looks like smallBox is the name of an object. \n  Though its not.*/</span>\n   \n   smallBox<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/*smallBox will now refer to a new object \n  and the older object will become â€˜Garbage Blockâ€™, \n  which will get destroyed \n  when Garbage collector will run.*/</span>\n\n  smallBox<span class=\"token punctuation\">.</span><span class=\"token function\">showDimension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/*Will print 0,0,0 since no value is assigned. \n  The default value is 0.*/</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"operators\">Operators<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#operators\"></a></h2>\n<h2 id=\"flow\">Flow<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flow\"></a></h2>\n<h3 id=\"conditionals\">Conditionals<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conditionals\"></a></h3>\n<h3 id=\"loops\">Loops<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops\"></a></h3>\n<h2 id=\"functionsmethods\">Functions/Methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functionsmethods\"></a></h2>\n<h3 id=\"public-static-void-mainstring-args\"><code>public static void main(String[] args)</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#public-static-void-mainstring-args\"></a></h3>\n<ul>\n<li>\n<p><strong><code>public</code></strong>: So that JVM can call main function from outside of the class body.</p>\n</li>\n<li>\n<p><strong><code>static</code></strong>: Static member functions can be called without an object.</p>\n</li>\n<li>\n<p><strong><code>void</code></strong>: Always â€” no return type</p>\n</li>\n<li>\n<p><strong>Argument</strong>: <code>String[] args</code>. Array of strings</p>\n</li>\n</ul>","noteIndex":{"id":"7ncn3al6mmutkhgoesulce9","title":"Computer Science","desc":"","updated":1715103618849,"created":1713296516553,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"36faf26c6be438d4aed355d72b55a110","links":[{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"arch","position":{"start":{"line":6,"column":3,"offset":105},"end":{"line":6,"column":11,"offset":113},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch"}},{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"paradigm","position":{"start":{"line":11,"column":3,"offset":159},"end":{"line":11,"column":15,"offset":171},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm"}}],"anchors":{"references":{"type":"header","text":"References","value":"references","line":23,"column":0,"depth":2}},"children":["0xgibr34qhbv1edksyoxakk","e5kuv5gcz6pdxrsakpf7eia","t246wcci6dy9lnof7l1os4l","71sipcgr0pdqyxnmntvx28w","5omh1zinw87le0eyms8g5mk","91er1wb2f5wmbdb5axx5r3r","9z7xt251y1nm9dy2exatukr","u712e7r8bk97hpg9h9j3m4f","xpf86eilma499o4ul566fk8","a1g6tjx0p6bp25v75262gp9","3pr5jo5c742vop6gnoe7c3k","stxoouqpk2rivotuvhjx4yz","g8tiwuotfnbfrbctwyfg8rc","jk63inaclv0ps5i7mktzmm2","5m1yclhdqeshe5szt0masfk","abgag3m7m74vmofvzyyt2fm"],"parent":null,"data":{},"body":"\n\nThese notes are arranged into the below topics:\n\n- AI (Sorry this is on the top, list is alphabetic)\n- [[arch]]\n- Data\n- Execution\n- Languages\n- Semantics\n- [[paradigm]]\n- Philosophy\n- Dev\n- Tools\n- Type Theory\n\n## References\n\n- Hierarchy inpiration - [Map of Computer Science](https://www.flickr.com/photos/95869671@N08/36231833334/in/photostream/lightbox/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"dependencies/github.com/chinootes/math","remote":{"type":"git","url":"git@github.com:chinootes/math.git"},"selfContained":true,"name":"math"},{"fsPath":".","selfContained":true,"name":"cs"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://chinootes.github.io","assetsPrefix":"/cs","duplicateNoteBehavior":{"action":"useVault","payload":["math","cs"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}