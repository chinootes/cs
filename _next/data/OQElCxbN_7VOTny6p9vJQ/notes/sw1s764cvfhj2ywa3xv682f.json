{"pageProps":{"note":{"id":"sw1s764cvfhj2ywa3xv682f","title":"Dynamic Binding","desc":"","updated":1708446217496,"created":1708355056856,"custom":{},"fname":"paradigm.oo.features.binding.dynamic","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"b6d220a6d923fd6daac50f2f6642d7df","links":[{"type":"wiki","from":{"fname":"paradigm.oo.features.binding.dynamic","id":"sw1s764cvfhj2ywa3xv682f","vaultName":"cs"},"value":"tags.interview-question","alias":"#interview-question","position":{"start":{"line":29,"column":1,"offset":481},"end":{"line":29,"column":20,"offset":500},"indent":[]},"xvault":false,"to":{"fname":"tags.interview-question"}},{"type":"wiki","from":{"fname":"paradigm.oo.features.binding.dynamic","id":"sw1s764cvfhj2ywa3xv682f","vaultName":"cs"},"value":"paradigm.oo.principles.polymorphism.runtime","position":{"start":{"line":69,"column":231,"offset":1503},"end":{"line":69,"column":278,"offset":1550},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oo.principles.polymorphism.runtime"}},{"from":{"fname":"paradigm.oo.principles.polymorphism.runtime","id":"cycr9ljbnb0i5tsmcw73ops","vaultName":"cs"},"type":"backlink","position":{"start":{"line":3,"column":61,"offset":62},"end":{"line":3,"column":101,"offset":102},"indent":[]},"value":"paradigm.oo.features.binding.dynamic"}],"anchors":{"argument----human-h--new-student-is-not-dynamic-binding":{"type":"header","text":"Argument -- Human h = new Student() is not dynamic binding","value":"argument----human-h--new-student-is-not-dynamic-binding","line":33,"column":0,"depth":1},"why-it-looks-like-its-not-runtime-polymorphism":{"type":"header","text":"Why it looks like its not runtime polymorphism","value":"why-it-looks-like-its-not-runtime-polymorphism","line":57,"column":0,"depth":2},"what-actually-happens":{"type":"header","text":"What actually happens","value":"what-actually-happens","line":66,"column":0,"depth":2}},"children":[],"parent":"eskj6szlpp6k9xe12cn45rq","data":{}},"body":"<h1 id=\"dynamic-binding\">Dynamic Binding<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dynamic-binding\"></a></h1>\n<p>When the type of object is determined at runtime.</p>\n<p>Happens when object of child is assigned to reference of parent.</p>\n<p>Example:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Human</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Student IS-A Human</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Human</span> h<span class=\"token punctuation\">)</span> <span class=\"token comment\">//method definition</span>\n\n<span class=\"token comment\">//method call</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Reference of Human type ————>       Object of Student type.</p>\n<p>(Reference Variable) ---------------->                                           (Object)</p>\n<h1 id=\"argument----human-h--new-student-is-not-dynamic-binding\">Argument -- <code>Human h = new Student()</code> is not dynamic binding<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#argument----human-h--new-student-is-not-dynamic-binding\"></a></h1>\n<p><a class=\"color-tag\" style=\"--tag-color: #54ac68;\" href=\"/cs/notes/lhy7fri8qkovbdholalflcv\">#interview-question</a></p>\n<p>Someone could very easily make an argument that <code>Human h = new Student()</code> is not Dynamic Binding</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">xyz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Human</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    h<span class=\"token punctuation\">.</span><span class=\"token function\">xyz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//This line will give error. </span>\n    h<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"why-it-looks-like-its-not-runtime-polymorphism\">Why it looks like its not runtime polymorphism<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-it-looks-like-its-not-runtime-polymorphism\"></a></h2>\n<p>The line <code>h.xyz()</code> will immediately show an error.</p>\n<ul>\n<li><code>h.xyz()</code>  shows error</li>\n<li>⇒ Program doesn't know h is an object of class Student</li>\n<li>⇒ h is an object of Human type</li>\n<li>⇒ Its not runtime polymorphism</li>\n</ul>\n<h2 id=\"what-actually-happens\">What actually happens<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-actually-happens\"></a></h2>\n<p>Compiler doesn't know at compile time that 'h' is an object of Student type.</p>\n<ul>\n<li>Object type determined at runtime</li>\n<li>⇒ Compiler still thinks 'h' is an object of Human type</li>\n<li>⇒ COMPILE TIME Error.</li>\n</ul>\n<p>Even though we can't call Student-exclusive  methods from this reference without casting, the type of object or the version of method to be called is still determined at runtime. Which still makes it a case of dynamic binding and <a href=\"/cs/notes/cycr9ljbnb0i5tsmcw73ops\">Runtime Polymorphism</a>. </p>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/cs/notes/cycr9ljbnb0i5tsmcw73ops\">Runtime Polymorphism (cs)</a></li>\n</ul>","noteIndex":{"id":"7ncn3al6mmutkhgoesulce9","title":"Computer Science","desc":"","updated":1715103618849,"created":1713296516553,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"36faf26c6be438d4aed355d72b55a110","links":[{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"arch","position":{"start":{"line":6,"column":3,"offset":105},"end":{"line":6,"column":11,"offset":113},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch"}},{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"paradigm","position":{"start":{"line":11,"column":3,"offset":159},"end":{"line":11,"column":15,"offset":171},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm"}}],"anchors":{"references":{"type":"header","text":"References","value":"references","line":23,"column":0,"depth":2}},"children":["0xgibr34qhbv1edksyoxakk","e5kuv5gcz6pdxrsakpf7eia","t246wcci6dy9lnof7l1os4l","71sipcgr0pdqyxnmntvx28w","5omh1zinw87le0eyms8g5mk","91er1wb2f5wmbdb5axx5r3r","9z7xt251y1nm9dy2exatukr","u712e7r8bk97hpg9h9j3m4f","xpf86eilma499o4ul566fk8","a1g6tjx0p6bp25v75262gp9","3pr5jo5c742vop6gnoe7c3k","stxoouqpk2rivotuvhjx4yz","g8tiwuotfnbfrbctwyfg8rc","jk63inaclv0ps5i7mktzmm2","5m1yclhdqeshe5szt0masfk","abgag3m7m74vmofvzyyt2fm"],"parent":null,"data":{},"body":"\n\nThese notes are arranged into the below topics:\n\n- AI (Sorry this is on the top, list is alphabetic)\n- [[arch]]\n- Data\n- Execution\n- Languages\n- Semantics\n- [[paradigm]]\n- Philosophy\n- Dev\n- Tools\n- Type Theory\n\n## References\n\n- Hierarchy inpiration - [Map of Computer Science](https://www.flickr.com/photos/95869671@N08/36231833334/in/photostream/lightbox/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"dependencies/github.com/chinootes/math","remote":{"type":"git","url":"git@github.com:chinootes/math.git"},"selfContained":true,"name":"math"},{"fsPath":".","selfContained":true,"name":"cs"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://chinootes.github.io","assetsPrefix":"/cs","duplicateNoteBehavior":{"action":"useVault","payload":["math","cs"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}