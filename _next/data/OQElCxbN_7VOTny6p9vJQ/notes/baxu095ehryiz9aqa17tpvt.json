{"pageProps":{"note":{"id":"baxu095ehryiz9aqa17tpvt","title":"Streams","desc":"","updated":1727028123309,"created":1725014887363,"custom":{},"fname":"lang.java.lib.interfaces.streams","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"b13f84f88a41200dba69762f84512fd4","links":[{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.function.predicate","position":{"start":{"line":11,"column":14,"offset":255},"end":{"line":11,"column":66,"offset":307},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.function.predicate"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.function","position":{"start":{"line":21,"column":11,"offset":530},"end":{"line":21,"column":53,"offset":572},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.function"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.function","position":{"start":{"line":31,"column":15,"offset":801},"end":{"line":31,"column":57,"offset":843},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.function"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.comparator","position":{"start":{"line":57,"column":29,"offset":1513},"end":{"line":57,"column":73,"offset":1557},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.comparator"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.consumer","position":{"start":{"line":72,"column":12,"offset":1982},"end":{"line":72,"column":54,"offset":2024},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.consumer"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.consumer","position":{"start":{"line":108,"column":15,"offset":2780},"end":{"line":108,"column":57,"offset":2822},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.consumer"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.classes.collectors","position":{"start":{"line":118,"column":43,"offset":3030},"end":{"line":118,"column":79,"offset":3066},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.classes.collectors"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.function.BinaryOperator","position":{"start":{"line":125,"column":32,"offset":3193},"end":{"line":125,"column":89,"offset":3250},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.function.BinaryOperator"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.comparator","position":{"start":{"line":144,"column":11,"offset":3624},"end":{"line":144,"column":55,"offset":3668},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.comparator"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.comparator","position":{"start":{"line":144,"column":68,"offset":3681},"end":{"line":144,"column":112,"offset":3725},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.comparator"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.function.predicate","position":{"start":{"line":156,"column":16,"offset":3928},"end":{"line":156,"column":68,"offset":3980},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.function.predicate"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.function.predicate","position":{"start":{"line":156,"column":82,"offset":3994},"end":{"line":156,"column":134,"offset":4046},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.function.predicate"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.lib.interfaces.func.function.predicate","position":{"start":{"line":156,"column":152,"offset":4064},"end":{"line":156,"column":204,"offset":4116},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.lib.interfaces.func.function.predicate"}},{"type":"wiki","from":{"fname":"lang.java.lib.interfaces.streams","id":"baxu095ehryiz9aqa17tpvt","vaultName":"cs"},"value":"lang.java.v.8","position":{"start":{"line":178,"column":15,"offset":4475},"end":{"line":178,"column":32,"offset":4492},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"lang.java.v.8"}},{"from":{"fname":"lang.java.v.8","id":"va87cklvt4f8fl4jm6s1xs8","vaultName":"cs"},"type":"backlink","position":{"start":{"line":6,"column":3,"offset":125},"end":{"line":6,"column":39,"offset":161},"indent":[]},"value":"lang.java.lib.interfaces.streams"},{"from":{"fname":"lang.java.lib.classes.collectors","id":"un60lp44o0qon2nddvolalf","vaultName":"cs"},"type":"backlink","position":{"start":{"line":2,"column":165,"offset":165},"end":{"line":2,"column":208,"offset":208},"indent":[]},"value":"lang.java.lib.interfaces.streams"}],"anchors":{"intermediate-operations":{"type":"header","text":"Intermediate Operations","value":"intermediate-operations","line":13,"column":0,"depth":2},"filter":{"type":"header","text":"filter()","value":"filter","line":17,"column":0,"depth":3},"map":{"type":"header","text":"map()","value":"map","line":27,"column":0,"depth":3},"flatmap":{"type":"header","text":"flatMap()","value":"flatmap","line":37,"column":0,"depth":3},"distinct":{"type":"header","text":"distinct()","value":"distinct","line":53,"column":0,"depth":3},"sorted-and-sorted":{"type":"header","text":"sorted() and sorted()","value":"sorted-and-sorted","line":63,"column":0,"depth":3},"peek":{"type":"header","text":"peek()","value":"peek","line":78,"column":0,"depth":3},"limitlong-n":{"type":"header","text":"limit(long n)","value":"limitlong-n","line":88,"column":0,"depth":3},"skiplong-n":{"type":"header","text":"skip(long n)","value":"skiplong-n","line":98,"column":0,"depth":3},"terminal-operations":{"type":"header","text":"Terminal Operations","value":"terminal-operations","line":110,"column":0,"depth":3},"foreach":{"type":"header","text":"forEach()","value":"foreach","line":114,"column":0,"depth":3},"collectcollector":{"type":"header","text":"collect(Collector)","value":"collectcollector","line":121,"column":0,"depth":3},"u-u-reduceu-identity--accumulator":{"type":"header","text":"<U> U reduce(U identity,  accumulator)","value":"u-u-reduceu-identity--accumulator","line":131,"column":0,"depth":3},"toarray":{"type":"header","text":"toArray()","value":"toarray","line":144,"column":0,"depth":3},"min-and--max":{"type":"header","text":"min() and  max()","value":"min-and--max","line":150,"column":0,"depth":3},"count":{"type":"header","text":"count()","value":"count","line":158,"column":0,"depth":3},"anymatch-allmatch-and-nonematch":{"type":"header","text":"anyMatch(), allMatch() and noneMatch()","value":"anymatch-allmatch-and-nonematch","line":162,"column":0,"depth":3},"findfirst":{"type":"header","text":"findFirst()","value":"findfirst","line":169,"column":0,"depth":3},"findany":{"type":"header","text":"findAny()","value":"findany","line":175,"column":0,"depth":3}},"children":[],"parent":"g0uqfqlelznnd4zyjzk9qb3","data":{}},"body":"<h1 id=\"streams\">Streams<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#streams\"></a></h1>\n<p>Framework for processing sequences of data in declarative and functional style.</p>\n<p>Basically, you can specify an operation and perform it for all items in the collection.</p>\n<h2 id=\"intermediate-operations\">Intermediate Operations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#intermediate-operations\"></a></h2>\n<p>Intermediate operations return a stream.</p>\n<h3 id=\"filterpredicate\"><code>filter</code>(<a href=\"/cs/notes/lx58207ls3auw10jnxmdcmj\">Predicate</a>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#filterpredicate\"></a></h3>\n<p>Filters elements based on a condition.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> evens <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"mapfunction\"><code>map</code>(<a href=\"/cs/notes/gfq63atn6koxm8w8u1nb38b\">Function</a>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mapfunction\"></a></h3>\n<p>Transform each element of the stream.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> upperNames <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                               <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">)</span>\n                               <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"flatmapfunction\"><code>flatMap</code>(<a href=\"/cs/notes/gfq63atn6koxm8w8u1nb38b\">Function</a>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flatmapfunction\"></a></h3>\n<p>Flattens stream of streams into a single stream.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> allWords <span class=\"token operator\">=</span> sentences<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                 <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>sentence <span class=\"token operator\">-></span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                 <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> nestedStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> flattenedStream <span class=\"token operator\">=</span> nestedStream<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"distinct\"><code>distinct()</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#distinct\"></a></h3>\n<p>Removes duplicates.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> uniqueNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                     <span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                     <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"sorted-and-sortedcomparator\"><code>sorted()</code> and <code>sorted</code>(<a href=\"/cs/notes/ip5orztybk9shcn0qhjo7ms\">Comparator</a>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sorted-and-sortedcomparator\"></a></h3>\n<p>Sorts by natural order or by Comparator, if passed.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sortedNames <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> sortedByAge <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                 <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                 <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"peekconsumer\"><code>peek</code>(<a href=\"/cs/notes/ae0jf8mu7bgpgcnnmf9c9vd\">Consumer</a>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#peekconsumer\"></a></h3>\n<p>Performs an action on each element without altering the stream.</p>\n<pre class=\"language-java\"><code class=\"language-java\">numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Processing number: \"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"limitlong-n\"><code>limit(long n)</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#limitlong-n\"></a></h3>\n<p>Limits the stream to first n elements.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> firstThree <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"skiplong-n\"><code>skip(long n)</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#skiplong-n\"></a></h3>\n<p>Skips the first n elements.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> withoutFirstTwo <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                       <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                                       <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"terminal-operations\">Terminal Operations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#terminal-operations\"></a></h3>\n<p>These operations consume the stream and return a result.</p>\n<h3 id=\"foreachconsumer\"><code>forEach</code>(<a href=\"/cs/notes/ae0jf8mu7bgpgcnnmf9c9vd\">Consumer</a>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#foreachconsumer\"></a></h3>\n<p>Performs an operation for each element.</p>\n<pre class=\"language-java\"><code class=\"language-java\">names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"collectcollector\"><code>collect(Collector)</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#collectcollector\"></a></h3>\n<p>Collects the stream into a collection.\nInstance of Collector can be fetched from <a href=\"/cs/notes/un60lp44o0qon2nddvolalf\">Collectors</a> API.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> collectedNames <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"u-u-reduceu-identity-binaryoperator-accumulator\"><code>&#x3C;U> U reduce(U identity,</code> <a href=\"/cs/notes/bqk8yqp4sz0wza0da1rnpru\">BinaryOperator</a><code> accumulator)</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#u-u-reduceu-identity-binaryoperator-accumulator\"></a></h3>\n<p>Reduces stream to a single value.</p>\n<ul>\n<li><code>identity</code> value is used as the initial value</li>\n<li><code>accumulator</code> function is used to combine all the elements.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"toarray\"><code>toArray()</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#toarray\"></a></h3>\n<p>Converts stream into array.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nameArray <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"mincomparator-and--maxcomparator\"><code>min</code>(<a href=\"/cs/notes/ip5orztybk9shcn0qhjo7ms\">Comparator</a>) and  <code>max</code>(<a href=\"/cs/notes/ip5orztybk9shcn0qhjo7ms\">Comparator</a>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mincomparator-and--maxcomparator\"></a></h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> min <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                               <span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">naturalOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"count\"><code>count()</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#count\"></a></h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"anymatchpredicate-allmatchpredicate-and-nonematchpredicate\"><code>anyMatch</code>(<a href=\"/cs/notes/lx58207ls3auw10jnxmdcmj\">Predicate</a>), <code>allMatch</code>(<a href=\"/cs/notes/lx58207ls3auw10jnxmdcmj\">Predicate</a>) and <code>noneMatch</code>(<a href=\"/cs/notes/lx58207ls3auw10jnxmdcmj\">Predicate</a>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#anymatchpredicate-allmatchpredicate-and-nonematchpredicate\"></a></h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> hasEven <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                         <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"findfirst\"><code>findFirst()</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#findfirst\"></a></h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> first <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                 <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"findany\"><code>findAny()</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#findany\"></a></h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> any <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                               <span class=\"token punctuation\">.</span><span class=\"token function\">findAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<hr>\n<p>Introduced in <a href=\"/cs/notes/va87cklvt4f8fl4jm6s1xs8\">Java 8</a></p>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/cs/notes/va87cklvt4f8fl4jm6s1xs8\">Java 8 (cs)</a></li>\n<li><a href=\"/cs/notes/un60lp44o0qon2nddvolalf\">Collectors (cs)</a></li>\n</ul>","noteIndex":{"id":"7ncn3al6mmutkhgoesulce9","title":"Computer Science","desc":"","updated":1715103618849,"created":1713296516553,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"cs"},"contentHash":"36faf26c6be438d4aed355d72b55a110","links":[{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"arch","position":{"start":{"line":6,"column":3,"offset":105},"end":{"line":6,"column":11,"offset":113},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"arch"}},{"type":"wiki","from":{"fname":"root","id":"7ncn3al6mmutkhgoesulce9","vaultName":"cs"},"value":"paradigm","position":{"start":{"line":11,"column":3,"offset":159},"end":{"line":11,"column":15,"offset":171},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm"}}],"anchors":{"references":{"type":"header","text":"References","value":"references","line":23,"column":0,"depth":2}},"children":["0xgibr34qhbv1edksyoxakk","e5kuv5gcz6pdxrsakpf7eia","t246wcci6dy9lnof7l1os4l","71sipcgr0pdqyxnmntvx28w","5omh1zinw87le0eyms8g5mk","91er1wb2f5wmbdb5axx5r3r","9z7xt251y1nm9dy2exatukr","u712e7r8bk97hpg9h9j3m4f","xpf86eilma499o4ul566fk8","a1g6tjx0p6bp25v75262gp9","3pr5jo5c742vop6gnoe7c3k","stxoouqpk2rivotuvhjx4yz","g8tiwuotfnbfrbctwyfg8rc","jk63inaclv0ps5i7mktzmm2","5m1yclhdqeshe5szt0masfk","abgag3m7m74vmofvzyyt2fm"],"parent":null,"data":{},"body":"\n\nThese notes are arranged into the below topics:\n\n- AI (Sorry this is on the top, list is alphabetic)\n- [[arch]]\n- Data\n- Execution\n- Languages\n- Semantics\n- [[paradigm]]\n- Philosophy\n- Dev\n- Tools\n- Type Theory\n\n## References\n\n- Hierarchy inpiration - [Map of Computer Science](https://www.flickr.com/photos/95869671@N08/36231833334/in/photostream/lightbox/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"dependencies/github.com/chinootes/math","remote":{"type":"git","url":"git@github.com:chinootes/math.git"},"selfContained":true,"name":"math"},{"fsPath":".","selfContained":true,"name":"cs"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://chinootes.github.io","assetsPrefix":"/cs","duplicateNoteBehavior":{"action":"useVault","payload":["math","cs"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}